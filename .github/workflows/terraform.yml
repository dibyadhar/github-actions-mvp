# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Build & Deploy Infrastructure'

on:
  push:
  workflow_dispatch:


permissions:
  contents: read

# Configure global environment values
env:
  AWS_REGION: eu-west-2

jobs:

  get_branch:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.get_name.outputs.branch }}
    steps:
      - id: get_name
        run: echo "::set-output name=branch::$(echo $GITHUB_REF_NAME | cut -d '/' -f2)"
        
  display_branch:
    needs: get_branch
    runs-on: ubuntu-latest
    steps:
      - name: step1
        run: echo ${{ needs.get_branch.outputs.branch_name }}

  validate:
    name: Validate Terraform Code
    runs-on: ubuntu-latest
    defaults: 
      run:
        working-directory: terraform
        # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
        shell: bash 
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Setup AWS Connection   
    - name: Connect to AWS 
      uses: aws-actions/configure-aws-credentials@v1
      with: 
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:  ${{env.AWS_REGION}}


    # Install the latest version of Terraform CLI 
    - name: terraform validate
      id: validate
      uses: dflook/terraform-validate@v1
      with:
        path: terraform
        backend_config_file: terraform/config/backends/test.backend
    
    - name: Validate failed
      if: ${{ failure() && steps.validate.outputs.failure-reason == 'validate-failed' }}
      run: echo "terraform validate failed"

  plan:
    runs-on: ubuntu-latest
    needs: validate
    name: Create Terraform Plan
    steps:
      - name: Checkout
        uses: actions/checkout@v2

     # Setup AWS Connection   
      - name: Connect to AWS 
        uses: aws-actions/configure-aws-credentials@v1
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:  ${{env.AWS_REGION}}
      

      - name: Use branch workspace
        uses: dflook/terraform-new-workspace@v1
        with:
          path: terraform
          workspace: ${{ needs.get_branch.outputs.branch_name }}
          backend_config_file: terraform/config/backends/test.backend
      
      - name: terraform plan
        uses: dflook/terraform-plan@v1
        with:
          path: terraform
          workspace: ${{ needs.get_branch.outputs.branch_name }}
          backend_config_file: terraform/config/backends/test.backend
          add_github_comment: false

          





  #   #   # On push to "main", build or change infrastructure according to Terraform configuration files
  #   #   # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
  #   # - name: Terraform Apply
  #   #   if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
  #   #   run: terraform apply -auto-approve -input=false
